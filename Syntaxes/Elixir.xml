<?xml version="1.0" encoding="UTF-8"?>
<syntax name="elixir">
	<meta>
		<name>Elixir</name>
		<type>script</type>
		<preferred-file-extension>ex</preferred-file-extension>
		<scriptable shebang="#!/usr/bin/env elixir" />
	</meta>
	
	<detectors>
		<extension priority="1.0">ex,exs</extension>
		<match-content lines="2" priority="1.0">\#\s*\-\*\-\s*mode:\s*elixir\b</match-content>
		<match-content lines="5" priority="1.0">^#\s*vi:\s*(syntax|ft)=(elixir)\b</match-content>
		<match-content lines="2" priority="0.7">\#\!.*?\belixir\b</match-content>
	</detectors>
	
	<indentation>
		<increase>
			<expression>(^.*(do)$)|(^.*\-\&gt;$)|(^\s*(from).*,$)|(^.*\s=$)|(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
		</increase>
		<decrease>
			<expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
		</decrease>
	</indentation>
	
	<comments>
		<single>
			<expression>#</expression>
		</single>
	</comments>
	
	<brackets>
		<pair open="%{" close="}" />
		<pair open="[" close="]" />
		<pair open="(" close=")" />
		<pair open="&lt;&lt;" close="&gt;&gt;" />
	</brackets>
	
	<surrounding-pairs>
		<pair open="{" close="}" />
		<pair open="[" close="]" />
		<pair open="(" close=")" />
		<pair open="&apos;" close="&apos;" />
		<pair open="&quot;" close="&quot;" />
		<pair open="`" close="`" />
	</surrounding-pairs>
	
	<symbols>
		<local scope="within-construct" />
		
		<documentation mode="before" match-multiple="comment" />
		<documentation mode="after" match-multiple="comment" />
	</symbols>
	
	<scopes>
		<include syntax="self" collection="comments" />
		<include syntax="self" collection="definitions" />
		
		<scope name="elixir.keyword">
			<strings suffix="(?!\?)">
				<!-- reserved words -->
				<string>true</string>
				<string>false</string>
				<string>nil</string>
				<string>when</string>
				<string>and</string>
				<string>or</string>
				<string>not</string>
				<string>in</string>
				<string>fn</string>
				<string>do</string>
				<string>end</string>
				<string>catch</string>
				<string>rescue</string>
				<string>after</string>
				<string>else</string>
				<!-- definitions -->
				<string>defdelegate</string>
				<string>defstruct</string>
				<!-- testing -->
				<string>describe</string>
				<string>test</string>
				<string>assert</string>
				<!-- <string>after</string>
				<string>and</string>
				<string>case</string>
				<string>catch</string>
				<string>cond</string>
				<string>def</string>
				<string>defcallback</string>
				<string>defexception</string>
				<string>defimpl</string>
				<string>defmacro</string>
				<string>defmacrop</string>
				<string>defmodule</string>
				<string>defp</string>
				<string>defprotocol</string>
				<string>do</string>
				<string>else</string>
				<string>end</string>
				<string>fn</string>
				<string>for</string>
				<string>if</string>
				<string>in</string>
				<string>not</string>
				<string>or</string>
				<string>quote</string>
				<string>raise</string>
				<string>receive</string>
				<string>rescue</string>
				<string>super</string>
				<string>throw</string>
				<string>try</string>
				<string>unless</string>
				<string>unquote_splicing</string>
				<string>unquote</string>
				<string>when</string> -->
			</strings>
		</scope>
		
		<include syntax="self" collection="values" />
		<include syntax="self" collection="identifiers" />
		<include syntax="self" collection="syntax" />
	</scopes>
	
	<collections>
		<!-- Comments -->
		<collection name="comments">
			<scope name="elixir.comment.single" spell-check="true">
				<expression>\#(.*)$</expression>
				<capture number="1" name="elixir.comment.content" />
			</scope>
		</collection>
		
		<!-- Definitions -->
		<collection name="definitions">
			<scope name="elixir.definition.local">
				<symbol type="variable" scope="local" />
				<expression>([a-zA-Z_][A-Za-z0-9_]*)\s*(\=)</expression>
				<capture number="1" name="elixir.identifier.name" />
				<capture number="2" name="elixir.operator" />
			</scope>
			
			<scope name="elixir.definition.function">
				<symbol type="function">
					<context behavior="start" group="function" />
				</symbol>
				<starts-with>
					<expression>(def|defp)\s+([a-zA-Z_][a-zA-Z0-9_]*)</expression>
					<capture number="1" name="elixir.keyword" />
					<capture number="2" name="elixir.identifier.function.name" />
				</starts-with>
				<ends-with>
					<expression>\s(do)$</expression>
				</ends-with>
				<subscopes>
					<scope name="elixir.arguments">
						<starts-with>
							<expression>\(</expression>
							<capture number="0" name="elixir.bracket" />
						</starts-with>
						<ends-with>
							<expression>\)|$</expression>
							<capture number="0" name="elixir.bracket" />
						</ends-with>
						<subscopes>
							<scope name="elixir.separator">
								<expression>,</expression>
							</scope>
							<scope name="elixir.identifier.args">
								<expression>\*args</expression>
							</scope>
							<scope name="elixir.identifier.argument.name">
								<symbol type="argument" />
								<expression>(?&lt;!\=)\b[a-zA-Z_][A-Za-z0-9_]*\b</expression>
							</scope>
							<include syntax="self" collection="values" />
							<include syntax="self" collection="syntax" />
						</subscopes>
					</scope>
				</subscopes>
			</scope>
			
		    <scope name="elixir.definition.class">
				<symbol type="class">
					<context behavior="start" group="class" />
				</symbol>
				<expression>(defmodule)\s([a-zA-Z_][a-zA-Z0-9_]*)\.([a-zA-Z_][a-zA-Z0-9_\.]*)\s(do)$</expression>
				<capture number="1" name="elixir.keyword" />
				<capture number="2" name="elixir.identifier.type.superclass" />
				<capture number="3" name="elixir.identifier.class.type.name" />
				<capture number="4" name="elixir.keyword" />
			</scope>
			
			<scope name="elixir.definition.block">
				<symbol type="block">
					<context behavior="start" />
				</symbol>
				<expression>\b(case|cond|for|try)\b</expression>
				<capture number="1" name="elixir.keyword" />
			</scope>
			
			<!-- <scope name="elixir.definition.block-inline">
				<symbol type="block">
					<context behavior="start" />
				</symbol>
				<expression>^\s*(if|unless)\b</expression>
				<capture number="1" name="elixir.keyword" />
			</scope> -->
			
			<scope name="elixir.definition.block-next">
				<symbol type="block">
					<context behavior="next" />
				</symbol>
				<expression>\b([a-zA-Z_][a-zA-Z0-9_]*)->\b</expression>
				<capture number="1" name="elixir.keyword" />
			</scope>
			
			<scope name="elixir.definition.end">
				<symbol type="block">
					<context behavior="end" />
				</symbol>
				<expression>\b(end)\b</expression>
				<capture number="1" name="elixir.keyword" />
			</scope>
		</collection>
		
		<!-- Values -->
		<collection name="values">
			<include syntax="self" collection="strings" />
			
			<!-- <scope name="elixir.value.regex">
				<starts-with>
					<expression>/</expression>
				</starts-with>
				<ends-with>
					<expression>/</expression>
				</ends-with>
				<subscopes>
					<cut-off>
						<expression>$</expression>
					</cut-off>
				</subscopes>
			</scope> -->
			
			<scope name="elixir.value.symbol">
				<expression>(?&lt;!:):[A-Za-z][A-Za-z0-9_]*</expression>
			</scope>
			<scope name="elixir.value.null">
				<strings>
					<string>nil</string>
				</strings>
			</scope>
			<scope name="elixir.value.boolean">
				<strings>
					<string>true</string>
					<string>false</string>
				</strings>
			</scope>
			<scope name="elixir.value.number">
				<expression>\b\-?(?:\d+(?:\.\d)?|(?:\.\d+))\b</expression>
			</scope>
		</collection>
		
		<!-- Strings -->
		<collection name="strings">
			<scope name="python.string.block" spell-check="true">
				<symbol type="comment">
					<context behavior="subtree" />
				</symbol>
				<starts-with>
					<expression>&quot;&quot;&quot;</expression>
				</starts-with>
				<ends-with>
					<expression>&quot;&quot;&quot;</expression>
				</ends-with>
			</scope>
			<!-- <scope name="elixir.string.block">
				<starts-with>
					<expression>%(~)?(\{|\[|\(|&apos;|&quot;|&lt;|\||/)</expression>
					<capture number="1" name="elixir.string.block.modifier" />
					<capture number="2" name="elixir.string.block.delimiter" />
				</starts-with>
				<ends-with>
					<expression>(\}|\]|\)|&apos;|&quot;|&gt;|\||/)</expression>
					<capture number="0" name="elixir.string.block.delimiter" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="variable-substitution" />
				</subscopes>
			</scope> -->
			<scope name="elixir.string.double-quoted">
				<starts-with>
					<expression>&quot;</expression>
					<capture number="0" name="elixir.string.double-quoted.delimiter" />
				</starts-with>
				<ends-with>
					<expression>(?:[^&quot;\\]|\\.)*(&quot;|$)</expression>
					<capture number="1" name="elixir.string.double-quoted.delimiter" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="variable-substitution" />
				</subscopes>
			</scope>
			<scope name="elixir.string.single-quoted">
				<starts-with>
					<expression>&apos;</expression>
					<capture number="0" name="elixir.string.single-quoted.delimiter" />
				</starts-with>
				<ends-with>
					<expression>(?:[^&apos;\\]|\\.)*(&apos;|$)</expression>
					<capture number="1" name="elixir.string.single-quoted.delimiter" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="variable-substitution" />
				</subscopes>
			</scope>
		</collection>
		
		<!-- Variable substitution -->
		<collection name="variable-substitution">
			<scope name="elixir.string.variable-substitution">
				<expression>\#\{.*?\}</expression>
			</scope>
		</collection>
		
		<!-- Identifiers -->
		<collection name="identifiers">
			<!-- <scope name="elixir.identifier.variable.global">
				<expression>\$[a-z][A-Za-z0-9_]*</expression>
			</scope> -->
			<!-- <scope name="elixir.identifier.variable.class">
				<expression>@@[a-z][A-Za-z0-9_]*</expression>
			</scope> -->
			<scope name="elixir.identifier.variable.instance">
				<expression>@[a-z][A-Za-z0-9_]*</expression>
			</scope>
			<scope name="elixir.identifier.core.module">
				<strings>
					<!-- Basic Types -->
					<string>Atom</string>
					<string>Base</string>
					<string>Bitwise</string>
					<string>Date</string>
					<string>DateTime</string>
					<string>Exception</string>
					<string>Float</string>
					<string>Function</string>
					<string>Integer</string>
					<string>Module</string>
					<string>Record</string>
					<string>Regex</string>
					<string>String</string>
					<string>Time</string>
					<string>Tuple</string>
					<string>URI</string>
					<string>Version</string>
					<!-- Collections and Enumerables -->
					<string>Access</string>
					<string>Date.Range</string>
					<string>Enum</string>
					<string>Keyword</string>
					<string>List</string>
					<string>Map</string>
					<string>MapSet</string>
					<string>Range</string>
					<string>Stream</string>
					<!-- IO and System -->
					<string>File</string>
					<string>IO</string>
					<string>OptionParser</string>
					<string>Path</string>
					<string>Port</string>
					<string>StringIO</string>
					<string>System</string>
					<!-- Calendar -->
					<string>Calendar</string>
					<!-- Processes and Applications -->
					<string>Agent</string>
					<string>Application</string>
					<string>Config</string>
					<string>DynamicSupervisor</string>
					<string>GenServer</string>
					<string>Node</string>
					<string>Process</string>
					<string>Registry</string>
					<string>Supervisor</string>
					<string>Task</string>
					<!-- Protocols -->
					<string>Collectable</string>
					<string>Enumerable</string>
					<string>Inspect</string>
					<string>Protocol</string>
					<!-- Code and Macros -->
					<string>Code</string>
					<string>Macro</string>
					
					<!-- other -->
					<string>Mix</string>
				</strings>
			</scope>
			<scope name="elixir.identifier.core.class">
				<strings>
					<string>Requirement</string>
					<string>Range</string>
					<string>Stat</string>
					<string>Stream</string>
					<string>ANSI</string>
					<string>ISO</string>
					<string>TimeZoneDatabase</string>
					<string>UTCOnlyTimeZoneDatabase</string>
					<string>Provider</string>
					<string>Reader</string>
					<string>Supervisor </string>
					<string>Algebra</string>
					<string>Opts</string>
					<string>Chars</string>
					<string>Chars</string>
					<string>ParallelCompiler</string>
					<string>Env</string>
					<!-- other -->
					<string>Config</string>
					<string>System</string>
				</strings>
			</scope>
			<scope name="elixir.identifier.core.function">
				<strings>
					<!-- Atom -->
					<strings prefix="(?&lt;!\.)" suffix="(?=\()">
					<string>to_charlist</string>
					<string>to_string</string>
					</strings>
					<!-- Base -->
					<string>decode16</string>
					<string>decode16!</string>
					<string>decode32</string>
					<string>decode32!</string>
					<string>decode64</string>
					<string>decode64!</string>
					<string>encode16</string>
					<string>encode32</string>
					<string>encode64</string>
					<string>hex_decode32</string>
					<string>hex_decode32!</string>
					<string>hex_encode32</string>
					<string>url_decode64</string>
					<string>url_decode64!</string>
					<string>url_encode64</string>
					<!-- Date -->
					<string>add</string>
					<string>compare</string>
					<string>convert</string>
					<string>convert!</string>
					<string>day_of_era</string>
					<string>day_of_week</string>
					<string>day_of_year</string>
					<string>days_in_month</string>
					<string>diff</string>
					<string>from_erl</string>
					<string>from_erl!</string>
					<string>from_iso8601</string>
					<string>from_iso8601!</string>
					<string>leap_year?</string>
					<string>months_in_year</string>
					<string>new</string>
					<string>quarter_of_year</string>
					<string>range</string>
					<string>to_erl</string>
					<string>to_iso8601</string>
					<string>to_string</string>
					<string>utc_today</string>
					<string>year_of_era</string>
					<!-- DateTime -->
					<string>add</string>
					<string>compare</string>
					<string>convert</string>
					<string>convert!</string>
					<string>diff</string>
					<string>from_iso8601</string>
					<string>from_naive</string>
					<string>from_naive!</string>
					<string>from_unix</string>
					<string>from_unix!</string>
					<string>now</string>
					<string>now!</string>
					<string>shift_zone</string>
					<string>shift_zone!</string>
					<string>to_date</string>
					<string>to_iso8601</string>
					<string>to_naive</string>
					<string>to_string</string>
					<string>to_time</string>
					<string>to_unix</string>
					<string>truncate</string>
					<string>utc_now</string>
					<!-- Exception -->
					<string>blame</string>
					<string>blame_mfa</string>
					<string>exception?</string>
					<string>format</string>
					<string>format_banner</string>
					<string>format_exit</string>
					<string>format_fa</string>
					<string>format_file_line</string>
					<string>format_mfa</string>
					<string>format_stacktrace</string>
					<string>format_stacktrace_entry</string>
					<string>message</string>
					<string>normalize</string>
					<!-- Float -->
					<string>ceil</string>
					<string>floor</string>
					<string>parse</string>
					<string>ratio</string>
					<string>round</string>
					<string>to_charlist</string>
					<string>to_string</string>
					<!-- Function -->
					<string>capture</string>
					<string>identity</string>
					<string>info</string>
					<!-- Integer -->
					<string>digits</string>
					<string>floor_div</string>
					<string>gcd</string>
					<string>mod</string>
					<string>parse</string>
					<string>to_charlist</string>
					<string>to_string</string>
					<string>undigits</string>
					<!-- Module -->
					<string>concat</string>
					<string>create</string>
					<string>defines?</string>
					<string>defines?</string>
					<string>defines_type?</string>
					<string>definitions_in</string>
					<string>delete_attribute</string>
					<string>eval_quoted</string>
					<string>get_attribute</string>
					<string>has_attribute?</string>
					<string>make_overridable</string>
					<string>open?</string>
					<string>overridable?</string>
					<string>put_attribute</string>
					<string>register_attribute</string>
					<string>safe_concat</string>
					<string>spec_to_callback</string>
					<string>split</string>
					<!-- NaiveDateTime -->
					<string>add</string>
					<string>compare</string>
					<string>convert</string>
					<string>convert!</string>
					<string>diff</string>
					<string>from_erl</string>
					<string>from_erl!</string>
					<string>from_iso8601</string>
					<string>from_iso8601!</string>
					<string>local_now</string>
					<string>new</string>
					<string>new</string>
					<string>to_date</string>
					<string>to_erl</string>
					<string>to_iso8601</string>
					<string>to_string</string>
					<string>to_time</string>
					<string>truncate</string>
					<string>utc_now</string>
					<!-- Record -->
					<string>defrecord</string>
					<string>defrecordp</string>
					<string>extract</string>
					<string>extract_all</string>
					<!-- Regex -->					
					<string>compile</string>
					<string>compile!</string>
					<string>escape</string>
					<string>match?</string>
					<string>named_captures</string>
					<string>names</string>
					<string>opts</string>
					<string>re_pattern</string>
					<string>recompile</string>
					<string>recompile!</string>
					<string>regex?</string>
					<string>replace</string>
					<string>run</string>
					<string>scan</string>
					<string>source</string>
					<string>split</string>
					<string>version</string>
					<!-- String -->
					<string>at</string>
					<string>bag_distance</string>
					<string>capitalize</string>
					<string>chunk</string>
					<string>codepoints</string>
					<string>contains?</string>
					<string>downcase</string>
					<string>duplicate</string>
					<string>ends_with?</string>
					<string>equivalent?</string>
					<string>first</string>
					<string>graphemes</string>
					<string>jaro_distance</string>
					<string>last</string>
					<string>length</string>
					<string>match?</string>
					<string>myers_difference</string>
					<string>next_codepoint</string>
					<string>next_grapheme</string>
					<string>next_grapheme_size</string>
					<string>pad_leading</string>
					<string>pad_trailing</string>
					<string>printable?</string>
					<string>replace</string>
					<string>replace_leading</string>
					<string>replace_prefix</string>
					<string>replace_suffix</string>
					<string>replace_trailing</string>
					<string>reverse</string>
					<string>slice</string>
					<string>slice</string>
					<string>split</string>
					<string>split</string>
					<string>split_at</string>
					<string>splitter</string>
					<string>starts_with?</string>
					<string>to_atom</string>
					<string>to_charlist</string>
					<string>to_existing_atom</string>
					<string>to_float</string>
					<string>to_integer</string>
					<string>to_integer</string>
					<string>trim</string>
					<string>trim</string>
					<string>trim_leading</string>
					<string>trim_leading</string>
					<string>trim_trailing</string>
					<string>trim_trailing</string>
					<string>upcase</string>
					<string>valid?</string>
					<!-- Time -->
					<string>add</string>
					<string>compare</string>
					<string>convert</string>
					<string>convert!</string>
					<string>diff</string>
					<string>from_erl</string>
					<string>from_erl!</string>
					<string>from_iso8601</string>
					<string>from_iso8601!</string>
					<string>new</string>
					<string>to_erl</string>
					<string>to_iso8601</string>
					<string>to_string</string>
					<string>truncate</string>
					<string>utc_now</string>
					<!-- Tuple -->
					<string>append</string>
					<string>delete_at</string>
					<string>duplicate</string>
					<string>insert_at</string>
					<string>to_list</string>
					<!-- URI -->
					<string>char_reserved?</string>
					<string>char_unescaped?</string>
					<string>char_unreserved?</string>
					<string>decode</string>
					<string>decode_query</string>
					<string>decode_www_form</string>
					<string>default_port</string>
					<string>default_port</string>
					<string>encode</string>
					<string>encode_query</string>
					<string>encode_www_form</string>
					<string>merge</string>
					<string>parse</string>
					<string>query_decoder</string>
					<string>to_string</string>
					<!-- Version -->
					<string>compare</string>
					<string>compile_requirement</string>
					<string>match?</string>
					<string>parse</string>
					<string>parse!</string>
					<string>parse_requirement</string>
					<string>parse_requirement!</string>
					<!-- Enum -->
					<string>all?</string>
					<string>any?</string>
					<string>at</string>
					<string>chunk_by</string>
					<string>chunk_every</string>
					<string>chunk_every</string>
					<string>chunk_while</string>
					<string>concat</string>
					<string>concat</string>
					<string>count</string>
					<string>count</string>
					<string>dedup</string>
					<string>dedup_by</string>
					<string>drop</string>
					<string>drop_every</string>
					<string>drop_while</string>
					<string>each</string>
					<string>empty?</string>
					<string>fetch</string>
					<string>fetch!</string>
					<string>filter</string>
					<string>find</string>
					<string>find_index</string>
					<string>find_value</string>
					<string>flat_map</string>
					<string>flat_map_reduce</string>
					<string>frequencies</string>
					<string>frequencies_by</string>
					<string>group_by</string>
					<string>intersperse</string>
					<string>into</string>
					<string>into</string>
					<string>join</string>
					<string>map</string>
					<string>map_every</string>
					<string>map_intersperse</string>
					<string>map_join</string>
					<string>map_reduce</string>
					<string>max</string>
					<string>max_by</string>
					<string>member?</string>
					<string>min</string>
					<string>min_by</string>
					<string>min_max</string>
					<string>min_max_by</string>
					<string>random</string>
					<string>reduce</string>
					<string>reduce</string>
					<string>reduce_while</string>
					<string>reject</string>
					<string>reverse</string>
					<string>reverse</string>
					<string>reverse_slice</string>
					<string>scan</string>
					<string>scan</string>
					<string>shuffle</string>
					<string>slice</string>
					<string>slice</string>
					<string>sort</string>
					<string>sort</string>
					<string>sort_by</string>
					<string>split</string>
					<string>split_while</string>
					<string>split_with</string>
					<string>sum</string>
					<string>take</string>
					<string>take_every</string>
					<string>take_random</string>
					<string>take_while</string>
					<string>to_list</string>
					<string>uniq</string>
					<string>uniq_by</string>
					<string>unzip</string>
					<string>with_index</string>
					<string>zip</string>
					<string>zip</string>
					<!-- List -->
					<string>ascii_printable?</string>
					<string>delete</string>
					<string>delete_at</string>
					<string>duplicate</string>
					<string>first</string>
					<string>flatten</string>
					<string>flatten</string>
					<string>foldl</string>
					<string>foldr</string>
					<string>improper?</string>
					<string>insert_at</string>
					<string>keydelete</string>
					<string>keyfind</string>
					<string>keymember?</string>
					<string>keyreplace</string>
					<string>keysort</string>
					<string>keystore</string>
					<string>keytake</string>
					<string>last</string>
					<string>myers_difference</string>
					<string>myers_difference</string>
					<string>pop_at</string>
					<string>replace_at</string>
					<string>starts_with?</string>
					<string>to_atom</string>
					<string>to_charlist</string>
					<string>to_existing_atom</string>
					<string>to_float</string>
					<string>to_integer</string>
					<string>to_integer</string>
					<string>to_string</string>
					<string>to_tuple</string>
					<string>update_at</string>
					<string>wrap</string>
					<string>zip</string>
					<!-- Map -->
					<string>delete</string>
					<string>drop</string>
					<string>equal?</string>
					<string>fetch</string>
					<string>fetch!</string>
					<string>from_struct</string>
					<string>get</string>
					<string>get_and_update</string>
					<string>get_and_update!</string>
					<string>get_lazy</string>
					<string>has_key?</string>
					<string>keys</string>
					<string>merge</string>
					<string>merge</string>
					<string>new</string>
					<string>new</string>
					<string>new</string>
					<string>pop</string>
					<string>pop!</string>
					<string>pop_lazy</string>
					<string>put</string>
					<string>put_new</string>
					<string>put_new_lazy</string>
					<string>replace!</string>
					<string>split</string>
					<string>take</string>
					<string>to_list</string>
					<string>update</string>
					<string>update!</string>
					<string>values</string>
					<!-- other -->
					<string>alias</string>
					<string>import</string>
					<string>require</string>
					<string>use</string>
					<string>config</string>
				</strings>
			</scope>
			<scope name="elixir.identifier.module.submodule">
				<expression>\b::([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
			</scope>
			<scope name="elixir.identifier.property">
				<expression>\b(?&lt;=\.)([a-zA-Z_][a-zA-Z0-9_]*)(?!\()\b</expression>
			</scope>
			<scope name="elixir.identifier.function">
				<expression>\b(?&lt;!\.)([a-zA-Z_][a-zA-Z0-9_]*)(?=\()\b</expression>
			</scope>
			<scope name="elixir.identifier.constant">
				<expression>\b(?&lt;![a-z0-9_])[A-Z_][A-Za-z0-9_]*\b</expression>
			</scope>
			<scope name="elixir.identifier">
				<expression>\b[a-zA-Z_][A-Za-z0-9_]*\b</expression>
			</scope>
		</collection>
		
		<collection name="syntax">
			<scope name="elixir.bracket">
				<expression>[\(\[\{\)\]\}]</expression>
			</scope>
			<scope name="elixir.operator">
				<expression>(\+|\-|\*|\*\*|/|%|\=|\=\=|!\=|\+\=|\-\=|\*\=|/\=|%\=|\*\*=|\&lt;|\&gt;|\&lt;\=|\&gt;=|\&lt;\=\&gt;|\=\=\=|\||\^|&amp;|\&lt;\&lt;|\&gt;\&gt;|~)</expression>
			</scope>
		</collection>
	</collections>
</syntax>
